#!/bin/bash

# add some global symbols
if [[ "${BASH_SOURCE[0]}" != "" ]]
then
  __PLOTTING_BUILD_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/build"
else
  __PLOTTING_BUILD_DIR="$( cd "$( dirname "${0}"  )" >/dev/null 2>&1 && pwd )/build"
fi

if [[ -d "${__PLOTTING_BUILD_DIR}" ]]
then
  function plot(){  [[ "${1}" == "cd" ]] && (return 0;) || ("${__PLOTTING_BUILD_DIR}/plot" ${1} ${2} ${3}; return 0;) }
  function define_plots(){ "${__PLOTTING_BUILD_DIR}/create" ${1} }
fi

scope_func () {

  if [ ! -d "${__PLOTTING_CONFIG_DIR}" ]; then
    echo ""; echo ">> Auto-complete script could not find plotting config folder: ${__PLOTTING_CONFIG_DIR}."; echo "";
    return
  fi

  _plot_completions_zsh() {

    local plot_definitions="${__PLOTTING_CONFIG_DIR}/plotDefinitions.XML"

    local modes=('interactive' 'pdf' 'file' 'bitmap' 'find' 'macro' 'cd')
    local gropus
    local names

    while read -r line ; do
      line="${line#<GROUP::}"
      line="${line%>}"
      gropus+=("${line}")
    done <<(grep -o '<GROUP::.*' $plot_definitions)

    updatePlotNames() {
      local group=$1
      names=()
      while read -r line ; do
        line="${line#<name>}"
        line="${line%</name>}"
        names+=("${line}")
      done <<(grep -B 1 "<figureGroup>${group}</figureGroup>" $plot_definitions | grep -vE '.*figureGroup.*|^--$')
    }

    _arguments \
      '1: :->mode'\
      '2: :->group'\
      '3: :->name'

    case $state in
      mode)
        _arguments '1:profiles:(${modes})'
        [[ "${words[2]}" == "cd" ]] && cd ${__PLOTTING_BUILD_DIR}
      ;;
      group)
        _arguments '2:profiles:(${gropus})'
      ;;
      name)
        updatePlotNames $words[3]
        _arguments '3:profiles:(${names})'
      ;;
    esac
  }
  compdef _plot_completions_zsh plot
}

scope_func
unset -f scope_func
