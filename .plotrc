#!/bin/bash

# add some global symbols
if [[ "${BASH_SOURCE[0]}" != "" ]]
then
  __PLOTTING_FRAMEWORK_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
else
  __PLOTTING_FRAMEWORK_DIR="$( cd "$( dirname "${0}"  )" >/dev/null 2>&1 && pwd )"
fi
export __PLOTTING_FRAMEWORK_DIR
__PLOTTING_BUILD_DIR="${__PLOTTING_FRAMEWORK_DIR}/build"
if [[ -d "${__PLOTTING_BUILD_DIR}" ]]
then
  function plot() { [[ "${1}" == "cd" ]] && { cd ${__PLOTTING_BUILD_DIR}; return 0; } || { { [[ -d ${__MY_PLOTS_BUILD_DIR} ]] && { (cd ${__MY_PLOTS_BUILD_DIR}; make 1>/dev/null || exit 1; [[ ! -z `find './' -name 'create' -mmin +1` ]] || ./create;) || return 1; } || :; }; "${__PLOTTING_BUILD_DIR}/plot" ${1} ${2} ${3}; return 0; } }
fi

_plot_completions_zsh() {

  local modes=('interactive' 'pdf' 'eps' 'svg' 'png' 'gif' 'file' 'find' 'macro')
  local groups
  local groupsAndCategories
  local names

  ${__PLOTTING_FRAMEWORK_DIR}/prepare_autocomplete.sh
  local AUTOCOMPFILE="${__PLOTTING_FRAMEWORK_DIR}/plots.csv"
  if [[ ! -f "$AUTOCOMPFILE" ]]; then
    return
  fi

  # first find groups and groups including categories
  while IFS="," read -r plotName figureGroup figureCategory
  do
    groups+=("${figureGroup}")
    [ -n "$figureCategory" ] && groupsAndCategories+=("${figureGroup}/${figureCategory}")
  done < $AUTOCOMPFILE

  updatePlotNames() {
    local groupAndCat=$1
    IFS="/" read -r group category <<< "$groupAndCat"
    names=()
    
    while IFS="," read -r plotName figureGroup figureCategory
    do
      if [[ "${group}" == "${figureGroup}" ]]
      then
        if [[ -n "${category}" && ! ( "${category}" == "${figureCategory}" || "${figureCategory}" == "${category}/"* ) ]]
        then
          continue
        fi
        names+=("${plotName}")
      fi
    done < $AUTOCOMPFILE
  }

  _arguments \
    '1: :->group'\
    '2: :->name'\
    '3: :->mode'


  case $state in
    group)
      if [[ "${words[2]}" == *"/"* ]]
      then
        _arguments '1:profiles:(${groupsAndCategories})'
      else
        _arguments '1:profiles:(${groups})'
      fi
    ;;
    name)
      if [[ "${words[2]}" == "cd" ]]
      then
        _arguments '2:profiles:()'
      else
        updatePlotNames $words[2]
        _arguments '2:profiles:(${names})'
      fi
    ;;
    mode)
      _arguments '3:profiles:(${modes})'
    ;;
  esac

  unset -f updatePlotNames
}

_plot_completions_bash() {

  local modes=('interactive pdf eps svg png gif file find macro')
  local groups
  local groupsAndCategories
  local names

  ${__PLOTTING_FRAMEWORK_DIR}/prepare_autocomplete.sh
  local AUTOCOMPFILE="${__PLOTTING_FRAMEWORK_DIR}/plots.csv"
  if [[ ! -f "$AUTOCOMPFILE" ]]; then
    return
  fi

  # first find groups and groups including categories
  while IFS="," read -r plotName figureGroup figureCategory
  do
    groups+=" ${figureGroup}"
    [ -n "$figureCategory" ] && groupsAndCategories+=" ${figureGroup}/${figureCategory}"
  done < $AUTOCOMPFILE

  updatePlotNames() {
    local groupAndCat=$1
    IFS="/" read -r group category <<< "$groupAndCat"
    names=()
    
    while IFS="," read -r plotName figureGroup figureCategory
    do
      if [[ "${group}" == "${figureGroup}" ]]
      then
        if [[ -n "${category}" && ! ( "${category}" == "${figureCategory}" || "${figureCategory}" == "${category}/"* ) ]]
        then
          continue
        fi
        names+=" ${plotName}"
      fi
    done < $AUTOCOMPFILE
  }

  case $COMP_CWORD in
  1)
    if [[ "${COMP_WORDS[COMP_CWORD]}" == *"/"* ]]
    then
      COMPREPLY=( $(compgen -W "${groupsAndCategories}" -- "${COMP_WORDS[COMP_CWORD]}") )
    else
      COMPREPLY=( $(compgen -W "${groups}" -- "${COMP_WORDS[COMP_CWORD]}") )
    fi
  ;;
  2)
    if [[ "${COMP_WORDS[COMP_CWORD-1]}" == "cd" ]]
    then
      COMPREPLY=( )
    else
      updatePlotNames "${COMP_WORDS[COMP_CWORD-1]}"
      COMPREPLY=( $(compgen -W "${names}" -- "${COMP_WORDS[COMP_CWORD]}") )
    fi
  ;;
  3)
    COMPREPLY=( $( compgen -W "${modes}" -- "${COMP_WORDS[COMP_CWORD]}" ) )
  ;;
  esac

  unset -f updatePlotNames
}

if command -v compdef &> /dev/null; then
  compdef _plot_completions_zsh plot
elif command -v complete &> /dev/null; then
  complete -F _plot_completions_bash plot
fi
