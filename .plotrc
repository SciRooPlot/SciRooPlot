#!/bin/bash

# add some global symbols
if [[ "${BASH_SOURCE[0]}" != "" ]]; then
  __SCIROOPLOT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
else
  __SCIROOPLOT_DIR="$( cd "$( dirname "${0}"  )" >/dev/null 2>&1 && pwd )"
fi
export __SCIROOPLOT_DIR
__SCIROOPLOT_BUILD_DIR="${__SCIROOPLOT_DIR}/build" # MEMO: this hard-codes the build destination...
export __SCIROOPLOT_BUILD_DIR
if [[ -d "${__SCIROOPLOT_BUILD_DIR}" ]]; then
  function plot() {
    if [[ "${1}" == "cd" ]]; then
      cd ${__SCIROOPLOT_BUILD_DIR}
      return 0
    fi

    local USER_EXEC=$(${__SCIROOPLOT_BUILD_DIR}/plot-config executable)
    local USER_BUILD_DIR=$([[ -z ${USER_EXEC} ]] || dirname ${USER_EXEC})
    if [[ -d ${USER_BUILD_DIR} ]]; then
      local USER_PLOTDEF="$(${__SCIROOPLOT_BUILD_DIR}/plot-config path)/plots.xml"
      (
        cd ${USER_BUILD_DIR};
        (make -j6 1> /dev/null) || exit 1
        if [[ ! -f ${USER_PLOTDEF} || -z $(find ${USER_EXEC} -mmin +1) ]]; then
          ${USER_EXEC}
        fi
      ) || return 1
    fi
    "${__SCIROOPLOT_BUILD_DIR}/plot" ${1} ${2} ${3}
    return 0
  }
  
  function plot-config() {
    if [[ "${1}" == "init" ]]; then
      PROJECT_NAME=${2}
      if [ -d "$PROJECT_NAME" ]; then
        echo "Folder ${PROJECT_NAME} already exists. Doing nothing..."
        return 1
      fi
      if [[ "${PROJECT_NAME}" == "" ]]; then
        echo "No project name specified. Doing nothing..."
        return 1
      fi
      WORKDIR=$(pwd)
      mkdir ${PROJECT_NAME}
      PROJECT_PATH=${WORKDIR}/${PROJECT_NAME}
      mkdir ${PROJECT_PATH}/build
      cp ${__SCIROOPLOT_DIR}/user/* ${PROJECT_PATH}/
      sed -i.bak "s/PROJECT_NAME/${PROJECT_NAME}/" ${PROJECT_PATH}/CMakeLists.txt && rm -f ${PROJECT_PATH}/CMakeLists.txt.bak
      sed -i.bak "s/PROJECT_NAME/${PROJECT_NAME}/" ${PROJECT_PATH}/DefinePlots.cxx && rm -f ${PROJECT_PATH}/DefinePlots.cxx.bak
      ${__SCIROOPLOT_BUILD_DIR}/plot-config executable ${PROJECT_NAME} ${PROJECT_PATH}/build/definePlots
      plot-config switch ${PROJECT_NAME}
      cd ${PROJECT_PATH}/build && cmake -Wno-dev .. 2>&1 > /dev/null && make 2>&1 > /dev/null && ./definePlots
      cd ${WORKDIR}
    else
      "${__SCIROOPLOT_BUILD_DIR}/plot-config" ${1} ${2} ${3}
    fi
    return 0
  }
fi

_plot_completions_zsh() {

  local modes=('interactive' 'pdf' 'eps' 'svg' 'png' 'gif' 'file' 'find' 'macro')
  local groups
  local groupsAndCategories
  local names
  
  local AUTOCOMPFILE="$(${__SCIROOPLOT_BUILD_DIR}/plot-config path)/plots.csv"
  if [[ ! -f "$AUTOCOMPFILE" ]]; then
    return
  fi

  # first find groups and groups including categories
  while IFS="," read -r plotName figureGroup figureCategory
  do
    groups+=("${figureGroup}")
    [ -n "$figureCategory" ] && groupsAndCategories+=("${figureGroup}/${figureCategory}")
  done < $AUTOCOMPFILE
  unset plotName figureGroup figureCategory

  updatePlotNames() {
    local groupAndCat=$1
    IFS="/" read -r group category <<< "$groupAndCat"
    names=()
    
    while IFS="," read -r plotName figureGroup figureCategory
    do
      if [[ "${group}" == "${figureGroup}" ]]; then
        if [[ -n "${category}" && ! ( "${category}" == "${figureCategory}" || "${figureCategory}" == "${category}/"* ) ]]; then
          continue
        fi
        names+=("${plotName}")
      fi
    done < $AUTOCOMPFILE
  }

  _arguments \
    '1: :->group'\
    '2: :->name'\
    '3: :->mode'


  case $state in
    group)
      if [[ "${words[2]}" == *"/"* ]]; then
        _arguments '1:profiles:(${groupsAndCategories})'
      else
        _arguments '1:profiles:(${groups})'
      fi
    ;;
    name)
      if [[ "${words[2]}" == "cd" ]]; then
        _arguments '2:profiles:()'
      else
        updatePlotNames $words[2]
        _arguments '2:profiles:(${names})'
      fi
    ;;
    mode)
      _arguments '3:profiles:(${modes})'
    ;;
  esac

  unset -f updatePlotNames
}

_plot-config_completions_zsh() {

  local generalCommands=('list' 'active' 'base' 'path' 'reset' 'clean')
  local projectCommands=('init' 'remove' 'switch' 'show' 'executable' 'outputDir')

  local projects
  
  local AUTOCOMPFILE="$(${__SCIROOPLOT_BUILD_DIR}/plot-config base)/projects.csv"
  if [[ -f "$AUTOCOMPFILE" ]]; then
    while read -r project
    do
      projects+=("${project}")
    done < $AUTOCOMPFILE
    unset project
  fi

  _arguments \
    '1: :->command'\
    '2: :->project'\
    '3: :->setting'

  case $state in
    command)
      _arguments '1:profiles:(${generalCommands} ${projectCommands})'
    ;;
    project)
      if [[ " ${projectCommands[@]} " =~ " ${words[2]} " ]]; then
        _arguments '2:profiles:(${projects})'
      fi
    ;;
  esac
}

_plot_completions_bash() {

  local modes=('interactive pdf eps svg png gif file find macro')
  local groups
  local groupsAndCategories
  local names

  local AUTOCOMPFILE="$(${__SCIROOPLOT_BUILD_DIR}/plot-config path)/plots.csv"
  if [[ ! -f "$AUTOCOMPFILE" ]]; then
    return
  fi

  # first find groups and groups including categories
  while IFS="," read -r plotName figureGroup figureCategory
  do
    groups+=" ${figureGroup}"
    [ -n "$figureCategory" ] && groupsAndCategories+=" ${figureGroup}/${figureCategory}"
  done < $AUTOCOMPFILE
  unset plotName figureGroup figureCategory

  updatePlotNames() {
    local groupAndCat=$1
    IFS="/" read -r group category <<< "$groupAndCat"
    names=()
    
    while IFS="," read -r plotName figureGroup figureCategory
    do
      if [[ "${group}" == "${figureGroup}" ]]; then
        if [[ -n "${category}" && ! ( "${category}" == "${figureCategory}" || "${figureCategory}" == "${category}/"* ) ]]; then
          continue
        fi
        names+=" ${plotName}"
      fi
    done < $AUTOCOMPFILE
  }

  case $COMP_CWORD in
  1)
    if [[ "${COMP_WORDS[COMP_CWORD]}" == *"/"* ]]; then
      COMPREPLY=( $(compgen -W "${groupsAndCategories}" -- "${COMP_WORDS[COMP_CWORD]}") )
    else
      COMPREPLY=( $(compgen -W "${groups}" -- "${COMP_WORDS[COMP_CWORD]}") )
    fi
  ;;
  2)
    if [[ "${COMP_WORDS[COMP_CWORD-1]}" == "cd" ]]; then
      COMPREPLY=( )
    else
      updatePlotNames "${COMP_WORDS[COMP_CWORD-1]}"
      COMPREPLY=( $(compgen -W "${names}" -- "${COMP_WORDS[COMP_CWORD]}") )
    fi
  ;;
  3)
    COMPREPLY=( $( compgen -W "${modes}" -- "${COMP_WORDS[COMP_CWORD]}" ) )
  ;;
  esac

  unset -f updatePlotNames
}

_plot-config_completions_bash() {

  local generalCommands=('list active base path reset clean')
  local projectCommands=('init remove switch show executable outputDir')

  local projects
  
  local AUTOCOMPFILE="$(${__SCIROOPLOT_BUILD_DIR}/plot-config base)/projects.csv"
  if [[ -f "$AUTOCOMPFILE" ]]; then
    while read -r project
    do
      projects+=("${project}")
    done < $AUTOCOMPFILE
    unset project
  fi

  case $COMP_CWORD in
  1)
    COMPREPLY=( $(compgen -W "${generalCommands}${projectCommands}" -- "${COMP_WORDS[COMP_CWORD]}") )
  ;;
  2)
    if [[ " ${projectCommands[@]} " =~ " ${COMP_WORDS[COMP_CWORD-1]} " ]]; then
      COMPREPLY=( $(compgen -W "${projects}" -- "${COMP_WORDS[COMP_CWORD]}") )
    else
      COMPREPLY=( )
    fi
  ;;
  esac
}


if command -v compdef &> /dev/null; then
  compdef _plot_completions_zsh plot
  compdef _plot-config_completions_zsh plot-config
elif command -v complete &> /dev/null; then
  complete -F _plot_completions_bash plot
  complete -F _plot-config_completions_bash plot-config
fi
