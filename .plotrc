#!/bin/bash

# add some global symbols
if [[ "${BASH_SOURCE[0]}" != "" ]]
then
  __PLOTTING_FRAMEWORK_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
else
  __PLOTTING_FRAMEWORK_DIR="$( cd "$( dirname "${0}"  )" >/dev/null 2>&1 && pwd )"
fi
export __PLOTTING_FRAMEWORK_DIR
__PLOTTING_BUILD_DIR="${__PLOTTING_FRAMEWORK_DIR}/build"
if [[ -d "${__PLOTTING_BUILD_DIR}" ]]
then
  function plot() { [[ "${1}" == "cd" ]] && { cd ${__PLOTTING_BUILD_DIR}; return 0; } || { [[ "${__MY_PLOTS_BUILD_DIR}" != "" ]] && { (cd ${__MY_PLOTS_BUILD_DIR}; make 1>/dev/null || exit 1; [[ ! -z `find './' -name 'create' -mmin +1` ]] || ./create;) || return 1; } || {}; "${__PLOTTING_BUILD_DIR}/plot" ${1} ${2} ${3}; return 0; } }
fi

if [ ! -d "${__PLOTTING_CONFIG_DIR}" ]; then
  echo ""; echo ">> Auto-complete script could not find plotting config folder: ${__PLOTTING_CONFIG_DIR}."; echo "";
  return
fi

_plot_completions_zsh() {

  local plot_definitions="${__PLOTTING_CONFIG_DIR}/plotDefinitions.XML"
  local input_identifiers="${__PLOTTING_CONFIG_DIR}/inputFiles.XML"

  local modes=('interactive' 'pdf' 'file' 'png' 'find' 'macro')
  local groups
  local names
  local rootfiles
  local inputIdentifiers

  while read -r line ; do
    line="${line#<GROUP::}"
    line="${line%>}"
    [[ "${line}" != "TEMPLATES" ]] && groups+=("${line}")
  done < <(grep -o '<GROUP::.*' $plot_definitions)

  while read -r line ; do
    line="${line#<}"
    line="${line%>}"
    inputIdentifiers+=("${line}")
  done < <(grep -o '<.*>' $input_identifiers | grep -vE '.*xml.*|.*FILE.*|.*</.*')

  updatePlotNames() {
    local groupAndCat=$1
    IFS=":" read -r group category <<< "$groupAndCat"
    names=()
    if [[ ! -z "${category}" ]]
    then
      while read -r line ; do
        line="${line#<name>}"
        line="${line%</name>}"
        names+=("${line}")
      done < <(grep -B 1 -A 1 "<figure_group>${group}</figure_group>" $plot_definitions | grep -B 2 "<figure_category>${category}</figure_category>" | grep -vE '.*figure_group.*|^--$' | grep -vE '.*figure_category.*|^--$')
    else
      while read -r line ; do
        line="${line#<name>}"
        line="${line%</name>}"
        names+=("${line}")
      done < <(grep -B 1 "<figure_group>${group}</figure_group>" $plot_definitions | grep -vE '.*figure_group.*|^--$')
    fi
  }

  while read -r line ; do
    rootfiles+=("${line}")
  done < <(ls -d *.root 2>/dev/null | grep '.*.root')


  _arguments \
    '1: :->group'\
    '2: :->name'\
    '3: :->mode'


  case $state in
    group)
      _arguments '1:profiles:(${groups})'
    ;;
    name)
      if [[ "${words[2]}" == "cd" ]]
      then
        _arguments '2:profiles:()'
      else
        updatePlotNames $words[2]
        _arguments '2:profiles:(${names})'
      fi
    ;;
    mode)
      _arguments '3:profiles:(${modes})'
    ;;
  esac

  unset -f updatePlotNames
}

_plot_completions_bash() {
  local plot_definitions="${__PLOTTING_CONFIG_DIR}/plotDefinitions.XML"
  local input_identifiers="${__PLOTTING_CONFIG_DIR}/inputFiles.XML"

  local modes=('interactive pdf file png find macro')
  local groups
  local names
  local rootfiles
  local inputIdentifiers

  while read -r line ; do
    line="${line#<GROUP::}"
    line="${line%>}"
    [[ "${line}" != "TEMPLATES" ]] && groups+=" ${line}"
  done < <(grep -o '<GROUP::.*' $plot_definitions)

  while read -r line ; do
    line="${line#<}"
    line="${line%>}"
    inputIdentifiers+=" ${line}"
  done < <(grep -o '<.*>' $input_identifiers | grep -vE '.*xml.*|.*FILE.*|.*</.*')

  updatePlotNames() {
    local groupAndCat=$1
    IFS=":" read -r group category <<< "${groupAndCat}"
    names=()
    if [[ ! -z "${category}" ]]
    then
      while read -r line ; do
        line="${line#<name>}"
        line="${line%</name>}"
        names+=" ${line}"
      done < <(grep -B 1 -A 1 "<figure_group>${group}</figure_group>" $plot_definitions | grep -B 2 "<figure_category>${category}</figure_category>" | grep -vE '.*figure_group.*|^--$' | grep -vE '.*figure_category.*|^--$')
    else
      while read -r line ; do
        line="${line#<name>}"
        line="${line%</name>}"
        names+=" ${line}"
      done < <(grep -B 1 "<figure_group>${group}</figure_group>" $plot_definitions | grep -vE '.*figure_group.*|^--$')
    fi
  }


  while read -r line ; do
    rootfiles+=" ${line}"
  done < <(ls -d *.root 2>/dev/null | grep '.*.root')

  case $COMP_CWORD in
  1)
    COMPREPLY=( $(compgen -W "${groups}" -- "${COMP_WORDS[COMP_CWORD]}") )
  ;;
  2)
    if [[ "${COMP_WORDS[COMP_CWORD-1]}" == "cd" ]]
    then
      COMPREPLY=( )
    else
      updatePlotNames "${COMP_WORDS[COMP_CWORD-1]}"
      COMPREPLY=( $(compgen -W "${names}" -- "${COMP_WORDS[COMP_CWORD]}") )
    fi
  ;;
  3)
    if [[ "${COMP_WORDS[COMP_CWORD-1]}" == ":" ]]
    then
      COMPREPLY=( )
    else
      COMPREPLY=( $( compgen -W "${modes}" -- "${COMP_WORDS[COMP_CWORD]}" ) )
    fi
  ;;
  4)
    if [[ "${COMP_WORDS[COMP_CWORD-2]}" == ":" ]]
    then
      leGroup="${COMP_WORDS[COMP_CWORD-3]}${COMP_WORDS[COMP_CWORD-2]}${COMP_WORDS[COMP_CWORD-1]}"
      updatePlotNames "${leGroup}"
      COMPREPLY=( $(compgen -W "${names}" -- "${COMP_WORDS[COMP_CWORD]}") )
    fi
  ;;
  5)
    if [[ "${COMP_WORDS[COMP_CWORD-3]}" == ":" ]]
    then
      COMPREPLY=( $( compgen -W "${modes}" -- "${COMP_WORDS[COMP_CWORD]}" ) )
    fi
  ;;
  esac

  unset -f updatePlotNames
}

if [ -n "$ZSH_VERSION" ]; then
  compdef _plot_completions_zsh plot
elif [ -n "$BASH_VERSION" ]; then
  complete -F _plot_completions_bash plot
fi
