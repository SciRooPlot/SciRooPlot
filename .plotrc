#!/bin/bash

# add some global symbols
if [[ "${BASH_SOURCE[0]}" != "" ]]; then
  __SCIROOPLOT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
else
  __SCIROOPLOT_DIR="$( cd "$( dirname "${0}"  )" >/dev/null 2>&1 && pwd )"
fi
export __SCIROOPLOT_DIR
__SCIROOPLOT_BUILD_DIR="${__SCIROOPLOT_DIR}/build"
export __SCIROOPLOT_BUILD_DIR
if [[ -d "${__SCIROOPLOT_BUILD_DIR}" ]]; then
  function plot() {
    if [[ "${1}" == "cd" ]]; then
      cd ${__SCIROOPLOT_BUILD_DIR}
      return 0
    fi

    local USER_EXEC=$(${__SCIROOPLOT_BUILD_DIR}/plot-config get executable)
    local USER_BUILD_DIR=$([[ -z ${USER_EXEC} ]] || dirname ${USER_EXEC})
    if [[ -d ${USER_BUILD_DIR} ]]; then
      local USER_PLOTDEF=$(${__SCIROOPLOT_BUILD_DIR}/plot-config get plotDefinitions)
      (
        cd ${USER_BUILD_DIR};
        (make 1> /dev/null) || exit 1
        if [[ ! -f ${USER_PLOTDEF} || -z $(find ${USER_EXEC} -mmin +1) ]]; then
          ${USER_EXEC}
        fi
      ) || return 1
    fi
    "${__SCIROOPLOT_BUILD_DIR}/plot" ${1} ${2} ${3}
    return 0
  }
  
  function plot-config() {
    local OPTIND OPTARG
    while getopts ":h" option; do
      case $option in
        h) #displays help
          help-plot-config
          return;;
        *) #incorrect option
          echo "Error: Invalid flag"
          return;;
      esac
    done
    shift $((OPTIND - 1))
    "${__SCIROOPLOT_BUILD_DIR}/plot-config" ${1} ${2} ${3} ${4}
  }
  
  function plot-init() {
    local OPTIND OPTARG
    while getopts ":h" option; do
      case $option in
        h) #displays help
          help-plot-init
          return;;
        *) #incorrect option
          echo "Error: Invalid flag"
          return;;
      esac
    done
    shift $((OPTIND - 1))
    PROJECT_NAME=${1}
    if [ -d "$PROJECT_NAME" ]; then
      echo "Folder ${PROJECT_NAME} already exists. Doing nothing..."
      return 1
    fi
    mkdir ${PROJECT_NAME}
    cd ${PROJECT_NAME}
    PROJECT_PATH=$(pwd)
    cd ..
    mkdir ${PROJECT_NAME}/build
    cp ${__SCIROOPLOT_DIR}/skeleton/* ${PROJECT_NAME}/
    sed -i.bak "s/MyPlots/${PROJECT_NAME}/" ${PROJECT_NAME}/CMakeLists.txt && rm ${PROJECT_NAME}/CMakeLists.txt.bak
    sed -i.bak "s/\"myPlots\"/\"${PROJECT_NAME}\"/g" ${PROJECT_PATH}/CreatePlots.cxx && rm ${PROJECT_NAME}/CreatePlots.cxx.bak
    echo "Created plotting project ${PROJECT_NAME}."
    if [[ "${2}" == "register" ]]; then
      # FIXME: requires that user adjusts the file paths in example...
      echo "Registered this project in plotting app. Use 'plot-config add ${PROJECT_NAME} ...' to change the settings manually."
      ${__SCIROOPLOT_BUILD_DIR}/plot-config add ${PROJECT_NAME} inputFiles ${PROJECT_PATH}/build/inputFiles.XML
      ${__SCIROOPLOT_BUILD_DIR}/plot-config add ${PROJECT_NAME} plotDefinitions ${PROJECT_PATH}/build/plotDefFile.XML
      ${__SCIROOPLOT_BUILD_DIR}/plot-config add ${PROJECT_NAME} executable ${PROJECT_PATH}/build/create
      mkdir ${PROJECT_PATH}/build/plots
      ${__SCIROOPLOT_BUILD_DIR}/plot-config add ${PROJECT_NAME} outputDir ${PROJECT_PATH}/build/plots
      echo "Use 'plot-config switch ${PROJECT_NAME}' to activate this project in the app."
    fi
    return 0
  }

fi

_plot_completions_zsh() {

  local modes=('interactive' 'pdf' 'eps' 'svg' 'png' 'gif' 'file' 'find' 'macro')
  local groups
  local groupsAndCategories
  local names

  local AUTOCOMPFILE="${__SCIROOPLOT_BUILD_DIR}/plots_$(${__SCIROOPLOT_BUILD_DIR}/plot-config get active).csv"
  ${__SCIROOPLOT_DIR}/scripts/prepare_autocomplete.sh $AUTOCOMPFILE
  if [[ ! -f "$AUTOCOMPFILE" ]]; then
    return
  fi

  # first find groups and groups including categories
  while IFS="," read -r plotName figureGroup figureCategory
  do
    groups+=("${figureGroup}")
    [ -n "$figureCategory" ] && groupsAndCategories+=("${figureGroup}/${figureCategory}")
  done < $AUTOCOMPFILE
  unset plotName figureGroup figureCategory

  updatePlotNames() {
    local groupAndCat=$1
    IFS="/" read -r group category <<< "$groupAndCat"
    names=()
    
    while IFS="," read -r plotName figureGroup figureCategory
    do
      if [[ "${group}" == "${figureGroup}" ]]; then
        if [[ -n "${category}" && ! ( "${category}" == "${figureCategory}" || "${figureCategory}" == "${category}/"* ) ]]; then
          continue
        fi
        names+=("${plotName}")
      fi
    done < $AUTOCOMPFILE
  }

  _arguments \
    '1: :->group'\
    '2: :->name'\
    '3: :->mode'


  case $state in
    group)
      if [[ "${words[2]}" == *"/"* ]]; then
        _arguments '1:profiles:(${groupsAndCategories})'
      else
        _arguments '1:profiles:(${groups})'
      fi
    ;;
    name)
      if [[ "${words[2]}" == "cd" ]]; then
        _arguments '2:profiles:()'
      else
        updatePlotNames $words[2]
        _arguments '2:profiles:(${names})'
      fi
    ;;
    mode)
      _arguments '3:profiles:(${modes})'
    ;;
  esac

  unset -f updatePlotNames
}

_plot_completions_bash() {

  local modes=('interactive pdf eps svg png gif file find macro')
  local groups
  local groupsAndCategories
  local names

  local AUTOCOMPFILE="${__SCIROOPLOT_BUILD_DIR}/plots_$(${__SCIROOPLOT_BUILD_DIR}/plot-config get active).csv"
  ${__SCIROOPLOT_DIR}/scripts/prepare_autocomplete.sh $AUTOCOMPFILE
  if [[ ! -f "$AUTOCOMPFILE" ]]; then
    return
  fi

  # first find groups and groups including categories
  while IFS="," read -r plotName figureGroup figureCategory
  do
    groups+=" ${figureGroup}"
    [ -n "$figureCategory" ] && groupsAndCategories+=" ${figureGroup}/${figureCategory}"
  done < $AUTOCOMPFILE
  unset plotName figureGroup figureCategory

  updatePlotNames() {
    local groupAndCat=$1
    IFS="/" read -r group category <<< "$groupAndCat"
    names=()
    
    while IFS="," read -r plotName figureGroup figureCategory
    do
      if [[ "${group}" == "${figureGroup}" ]]; then
        if [[ -n "${category}" && ! ( "${category}" == "${figureCategory}" || "${figureCategory}" == "${category}/"* ) ]]; then
          continue
        fi
        names+=" ${plotName}"
      fi
    done < $AUTOCOMPFILE
  }

  case $COMP_CWORD in
  1)
    if [[ "${COMP_WORDS[COMP_CWORD]}" == *"/"* ]]; then
      COMPREPLY=( $(compgen -W "${groupsAndCategories}" -- "${COMP_WORDS[COMP_CWORD]}") )
    else
      COMPREPLY=( $(compgen -W "${groups}" -- "${COMP_WORDS[COMP_CWORD]}") )
    fi
  ;;
  2)
    if [[ "${COMP_WORDS[COMP_CWORD-1]}" == "cd" ]]; then
      COMPREPLY=( )
    else
      updatePlotNames "${COMP_WORDS[COMP_CWORD-1]}"
      COMPREPLY=( $(compgen -W "${names}" -- "${COMP_WORDS[COMP_CWORD]}") )
    fi
  ;;
  3)
    COMPREPLY=( $( compgen -W "${modes}" -- "${COMP_WORDS[COMP_CWORD]}" ) )
  ;;
  esac

  unset -f updatePlotNames
}

if command -v compdef &> /dev/null; then
  compdef _plot_completions_zsh plot
elif command -v complete &> /dev/null; then
  complete -F _plot_completions_bash plot
fi


function help-plot-config() {
  echo "Configures path to <inputFiles | plotDefinitions | executable | outputDir> via add command or"
  echo "switches between different plot-configs previously set up via switch command"
  echo
  echo "usage: add: plot-config [-h] add <CONFIGNAME> <inputFiles | plotDefinitions | executable | outputDir> <path>"
  echo "usage: switch: plot-config [-h] switch <CONFIGNAME>"
}

function help-plot-init() {
  echo "Initializes a new project called <PROJECT_NAME>." 
  echo
  echo "usage: plot-init [-h] <PROJECT_NAME> [<option>=<register>]"
  echo "options:"
  echo "option==register    plot-config will automatically be called for the new project.
                    Default path for XML files, exectuable and plots folder is 
                    inside the build folder."
}